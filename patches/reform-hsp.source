Index: haskell-happstack/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/Common.hs
===================================================================
--- haskell-happstack.orig/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/Common.hs
+++ haskell-happstack/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/Common.hs
@@ -2,8 +2,6 @@
 {-# OPTIONS_GHC -F -pgmFhsx2hs #-}
 module Text.Reform.HSP.Common where
 
-import Data.List      (intercalate)
-import Data.Monoid    ((<>), mconcat)
 import Data.Text.Lazy (Text, pack)
 import qualified Data.Text as T
 import Text.Reform.Backend
@@ -165,55 +163,6 @@ inputRadio choices isDefault =
              , <br />
              ]
 
-inputRadioForms :: forall m x error input lbl proof a. (Functor m, Monad m, FormError error, ErrorInputType error ~ input, FormInput input, XMLGenerator x, StringType x ~ Text, EmbedAsChild x lbl, EmbedAsAttr x (Attr Text FormId)) =>
-                   [(Form m input error [XMLGenT x (XMLType x)] proof a, lbl)]  -- ^ value, label, initially checked
-                 -> a -- ^ default
-                 -> Form m input error [XMLGenT x (XMLType x)] proof a
-inputRadioForms choices def =
-    inputRadioForms' onclick choices def
-    where
-      formIdsJS :: [FormId] -> Text
-      formIdsJS [] = "[]"
-      formIdsJS ids =
-          "['" <> (pack $ intercalate "', '" $ map show ids) <> "']"
-
-      onclick :: FormId -> FormId -> [FormId] -> Text
-      onclick nm iview iviews = mconcat
-                [ "var views = " <> formIdsJS iviews <> ";"
-                , "var iview = '" <> (pack $ show iview) <> "';"
-                , "for (var i = 0; i < views.length; i++) {"
-                , "  if (iview == views[i]) {"
-                , "    document.getElementById(iview).style.display='block';"
-                , "  } else {"
-                , "    document.getElementById(views[i]).style.display='none';"
-                , "  }"
-                , "}"
-                ]
-
-inputRadioForms' :: forall m x error input lbl proof a. (Functor m, Monad m, FormError error, ErrorInputType error ~ input, FormInput input, XMLGenerator x, StringType x ~ Text, EmbedAsChild x lbl, EmbedAsAttr x (Attr Text FormId)) =>
-                    (FormId -> FormId -> [FormId] -> Text)
-                 -> [(Form m input error [XMLGenT x (XMLType x)] proof a, lbl)]  -- ^ value, label, initially checked
-                 -> a -- ^ default
-                 -> Form m input error [XMLGenT x (XMLType x)] proof a
-inputRadioForms' onclick choices def =
-    G.inputChoiceForms def choices mkRadios
-    where
-      iviewsExtract :: [(FormId, Int, FormId, [XMLGenT x (XMLType x)], lbl, Bool)] -> [FormId]
-      iviewsExtract = map (\(_,_, iv, _, _, _) -> iv)
-
-      mkRadios :: FormId -> [(FormId, Int, FormId, [XMLGenT x (XMLType x)], lbl, Bool)] -> [XMLGenT x (XMLType x)]
-      mkRadios nm choices' =
-          let iviews = iviewsExtract choices' in
-          (concatMap (mkRadio nm iviews) choices')
-
-      mkRadio nm iviews (i, val, iview, view, lbl, checked) =
-             [ <div>
-                <input type="radio" onclick=(onclick nm iview iviews) id=i name=nm value=(pack $ show val) (if checked then [("checked" := "checked") :: Attr Text Text] else []) />
-               <label for=i><% lbl %></label>
-               <div id=iview (if checked then [] else [("style" := "display:none;") :: Attr Text Text])><% view %></div>
-              </div>
-             ]
-
 select :: (Functor m, Monad m, FormError error, ErrorInputType error ~ input, FormInput input, XMLGenerator x, StringType x ~ Text, EmbedAsChild x lbl, EmbedAsAttr x (Attr Text FormId)) =>
               [(a, lbl)]  -- ^ value, label
            -> (a -> Bool) -- ^ isDefault, must match *exactly one* element in the list of choices
Index: haskell-happstack/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/String.hs
===================================================================
--- haskell-happstack.orig/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/String.hs
+++ haskell-happstack/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/String.hs
@@ -16,7 +16,6 @@ module Text.Reform.HSP.String
     , inputCheckbox
     , inputCheckboxes
     , inputRadio
-    , inputRadioForms
     , inputFile
       -- * \<textarea\> element
     , textarea
@@ -138,13 +137,6 @@ inputRadio :: (Functor m, Monad m, FormE
            -> Form m input error [XMLGenT x (XMLType x)] () a
 inputRadio = C.inputRadio
 
--- | Create a group of radio buttons that select between sub-forms
-inputRadioForms :: (Functor m, Monad m, FormError error, ErrorInputType error ~ input, FormInput input, XMLGenerator x, StringType x ~ Text, EmbedAsChild x lbl, EmbedAsAttr x (Attr Text FormId)) =>
-              [(Form m input error [XMLGenT x (XMLType x)] proof a, lbl)]  -- ^ value, label, initially checked
-           -> a -- ^ default
-           -> Form m input error [XMLGenT x (XMLType x)] proof a
-inputRadioForms = C.inputRadioForms
-
 -- | Create an @\<input type=\"file\"\>@ element
 --
 -- This control may succeed even if the user does not actually select a file to upload. In that case the uploaded name will likely be \"\" and the file contents will be empty as well.
Index: haskell-happstack/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/Text.hs
===================================================================
--- haskell-happstack.orig/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/Text.hs
+++ haskell-happstack/haskell-reform-hsp/src/reform-hsp-0.2.1/Text/Reform/HSP/Text.hs
@@ -15,7 +15,6 @@ module Text.Reform.HSP.Text
     , inputCheckbox
     , inputCheckboxes
     , inputRadio
-    , inputRadioForms
     , inputFile
       -- * \<textarea\> element
     , textarea
@@ -140,13 +139,6 @@ inputRadio :: (Functor m, Monad m, FormE
            -> Form m input error [XMLGenT x (XMLType x)] () a
 inputRadio = C.inputRadio
 
--- | Create a group of radio buttons that select between sub-forms
-inputRadioForms :: (Functor m, Monad m, FormError error, ErrorInputType error ~ input, FormInput input, XMLGenerator x, StringType x ~ Text, EmbedAsChild x lbl, EmbedAsAttr x (Attr Text FormId)) =>
-              [(Form m input error [XMLGenT x (XMLType x)] proof a, lbl)]  -- ^ value, label, initially checked
-           -> a -- ^ default
-           -> Form m input error [XMLGenT x (XMLType x)] proof a
-inputRadioForms = C.inputRadioForms
-
 -- | Create an @\<input type=\"file\"\>@ element
 --
 -- This control may succeed even if the user does not actually select a file to upload. In that case the uploaded name will likely be \"\" and the file contents will be empty as well.
