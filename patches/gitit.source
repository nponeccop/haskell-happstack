Index: haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/data/default.conf
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.10.3.1/data/default.conf
+++ haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/data/default.conf
@@ -238,8 +238,8 @@ use-feed: no
 
 base-url:
 # the base URL of the wiki, to be used in constructing feed IDs
-# and RPX token_urls.  Set this if use-feed is 'yes' or
-# authentication-method is 'rpx'.
+# and RPX token_urls, and in exporting docx and pdf.
+# Set this if use-feed is 'yes' or authentication-method is 'rpx'.
 
 absolute-urls: no
 # make wikilinks absolute with respect to the base-url.
Index: haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/ContentTransformer.hs
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/ContentTransformer.hs
+++ haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/ContentTransformer.hs
@@ -85,6 +85,7 @@ import Network.URI (isUnescapedInURI)
 import Network.URL (encString)
 import Prelude hiding (catch)
 import System.FilePath
+import qualified Text.Pandoc.Builder as B
 import Text.HTML.SanitizeXSS (sanitizeBalance)
 import Text.Highlighting.Kate
 import Text.Pandoc hiding (MathML, WebTeX, MathJax)
@@ -452,8 +453,8 @@ addPageTitleToPandoc :: String -> Pandoc
 addPageTitleToPandoc title' (Pandoc _ blocks) = do
   updateLayout $ \layout -> layout{ pgTitle = title' }
   return $ if null title'
-              then Pandoc (Meta [] [] []) blocks
-              else Pandoc (Meta [Str title'] [] []) blocks
+              then Pandoc nullMeta blocks
+              else Pandoc (B.setMeta "title" (B.str title') nullMeta) blocks
 
 -- | Adds javascript links for math support.
 addMathSupport :: a -> ContentTransformer a
@@ -553,9 +554,10 @@ inlinesToString = concatMap go
                LineBreak               -> " "
                Math DisplayMath s      -> "$$" ++ s ++ "$$"
                Math InlineMath s       -> "$" ++ s ++ "$"
-               RawInline "tex" s       -> s
+               RawInline (Format "tex") s -> s
                RawInline _ _           -> ""
                Link xs _               -> concatMap go xs
                Image xs _              -> concatMap go xs
                Note _                  -> ""
+               Span _ xs               -> concatMap go xs
 
Index: haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/Export.hs
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/Export.hs
+++ haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/Export.hs
@@ -78,7 +78,7 @@ respondX templ mimetype ext fn opts page
              then fixURLs page doc
              else return doc
   respond mimetype ext (fn opts{writerTemplate = template
-                               ,writerSourceDirectory = repositoryPath cfg
+                               ,writerSourceURL = Just $ baseUrl cfg
                                ,writerUserDataDir = pandocUserData cfg})
           page doc'
 
@@ -134,7 +134,7 @@ respondSlides templ slideVariant page do
                 writerVariables =
                   ("body",body''):("dzslides-core",dzcore):variables'
                ,writerTemplate = template
-               ,writerSourceDirectory = repositoryPath cfg
+               ,writerSourceURL = Just $ baseUrl cfg
                ,writerUserDataDir = pandocUserData cfg
                } (Pandoc meta [])
     h' <- liftIO $ makeSelfContained (pandocUserData cfg) h
Index: haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/Types.hs
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/Types.hs
+++ haskell-happstack/haskell-gitit/src/gitit-0.10.3.1/Network/Gitit/Types.hs
@@ -400,7 +400,7 @@ type Handler = GititServerPart Response
 fromEntities :: String -> String
 fromEntities ('&':xs) =
   case lookupEntity ent of
-        Just c  -> c : fromEntities rest
+        Just c  -> c ++ fromEntities rest
         Nothing -> '&' : fromEntities xs
     where (ent, rest) = case break (\c -> isSpace c || c == ';') xs of
                              (zs,';':ys) -> (zs,ys)
